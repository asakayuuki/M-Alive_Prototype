// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audio.proto

#ifndef PROTOBUF_audio_2eproto__INCLUDED
#define PROTOBUF_audio_2eproto__INCLUDED

#include <string>

#include <Protobuf/lotus/google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <Protobuf/lotus/google/protobuf/io/coded_stream.h>
#include <Protobuf/lotus/google/protobuf/arena.h>
#include <Protobuf/lotus/google/protobuf/arenastring.h>
#include <Protobuf/lotus/google/protobuf/generated_message_table_driven.h>
#include <Protobuf/lotus/google/protobuf/generated_message_util.h>
#include <Protobuf/lotus/google/protobuf/metadata.h>
#include <Protobuf/lotus/google/protobuf/message.h>
#include <Protobuf/lotus/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <Protobuf/lotus/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <Protobuf/lotus/google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_audio_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::lotus::google::protobuf::internal::ParseTableField entries[];
  static const ::lotus::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::lotus::google::protobuf::internal::ParseTable schema[2];
  static const ::lotus::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::lotus::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::lotus::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsvisemeImpl();
void InitDefaultsviseme();
void InitDefaultsVisemeAudioImpl();
void InitDefaultsVisemeAudio();
inline void InitDefaults() {
  InitDefaultsviseme();
  InitDefaultsVisemeAudio();
}
}  // namespace protobuf_audio_2eproto
class VisemeAudio;
class VisemeAudioDefaultTypeInternal;
extern VisemeAudioDefaultTypeInternal _VisemeAudio_default_instance_;
class viseme;
class visemeDefaultTypeInternal;
extern visemeDefaultTypeInternal _viseme_default_instance_;

// ===================================================================

class viseme : public ::lotus::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viseme) */ {
 public:
  viseme();
  virtual ~viseme();

  viseme(const viseme& from);

  inline viseme& operator=(const viseme& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  viseme(viseme&& from) noexcept
    : viseme() {
    *this = ::std::move(from);
  }

  inline viseme& operator=(viseme&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::lotus::google::protobuf::Descriptor* descriptor();
  static const viseme& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const viseme* internal_default_instance() {
    return reinterpret_cast<const viseme*>(
               &_viseme_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(viseme* other);
  friend void swap(viseme& a, viseme& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline viseme* New() const PROTOBUF_FINAL { return New(NULL); }

  viseme* New(::lotus::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::lotus::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::lotus::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const viseme& from);
  void MergeFrom(const viseme& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::lotus::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::lotus::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::lotus::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::lotus::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(viseme* other);  
  private:
  inline ::lotus::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::lotus::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::lotus::google::protobuf::int32 id() const;
  void set_id(::lotus::google::protobuf::int32 value);

  // int32 offset = 2;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  ::lotus::google::protobuf::int32 offset() const;
  void set_offset(::lotus::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:viseme)
 private:

  ::lotus::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::lotus::google::protobuf::int32 id_;
  ::lotus::google::protobuf::int32 offset_;
  mutable int _cached_size_;
  friend struct ::protobuf_audio_2eproto::TableStruct;
  friend void ::protobuf_audio_2eproto::InitDefaultsvisemeImpl();
};
// -------------------------------------------------------------------

class VisemeAudio : public ::lotus::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VisemeAudio) */ {
 public:
  VisemeAudio();
  virtual ~VisemeAudio();

  VisemeAudio(const VisemeAudio& from);

  inline VisemeAudio& operator=(const VisemeAudio& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VisemeAudio(VisemeAudio&& from) noexcept
    : VisemeAudio() {
    *this = ::std::move(from);
  }

  inline VisemeAudio& operator=(VisemeAudio&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::lotus::google::protobuf::Descriptor* descriptor();
  static const VisemeAudio& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisemeAudio* internal_default_instance() {
    return reinterpret_cast<const VisemeAudio*>(
               &_VisemeAudio_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(VisemeAudio* other);
  friend void swap(VisemeAudio& a, VisemeAudio& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VisemeAudio* New() const PROTOBUF_FINAL { return New(NULL); }

  VisemeAudio* New(::lotus::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::lotus::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::lotus::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VisemeAudio& from);
  void MergeFrom(const VisemeAudio& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::lotus::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::lotus::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::lotus::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::lotus::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VisemeAudio* other);
  private:
  inline ::lotus::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::lotus::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .viseme vLst = 2;
  int vlst_size() const;
  void clear_vlst();
  static const int kVLstFieldNumber = 2;
  const ::viseme& vlst(int index) const;
  ::viseme* mutable_vlst(int index);
  ::viseme* add_vlst();
  ::lotus::google::protobuf::RepeatedPtrField< ::viseme >*
      mutable_vlst();
  const ::lotus::google::protobuf::RepeatedPtrField< ::viseme >&
      vlst() const;

  // string json = 1;
  void clear_json();
  static const int kJsonFieldNumber = 1;
  const ::std::string& json() const;
  void set_json(const ::std::string& value);
  #if LANG_CXX11
  void set_json(::std::string&& value);
  #endif
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  ::std::string* mutable_json();
  ::std::string* release_json();
  void set_allocated_json(::std::string* json);

  // bytes audio = 3;
  void clear_audio();
  static const int kAudioFieldNumber = 3;
  const ::std::string& audio() const;
  void set_audio(const ::std::string& value);
  #if LANG_CXX11
  void set_audio(::std::string&& value);
  #endif
  void set_audio(const char* value);
  void set_audio(const void* value, size_t size);
  ::std::string* mutable_audio();
  ::std::string* release_audio();
  void set_allocated_audio(::std::string* audio);

  // @@protoc_insertion_point(class_scope:VisemeAudio)
 private:

  ::lotus::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::lotus::google::protobuf::RepeatedPtrField< ::viseme > vlst_;
  ::lotus::google::protobuf::internal::ArenaStringPtr json_;
  ::lotus::google::protobuf::internal::ArenaStringPtr audio_;
  mutable int _cached_size_;
  friend struct ::protobuf_audio_2eproto::TableStruct;
  friend void ::protobuf_audio_2eproto::InitDefaultsVisemeAudioImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// viseme

// int32 id = 1;
inline void viseme::clear_id() {
  id_ = 0;
}
inline ::lotus::google::protobuf::int32 viseme::id() const {
  // @@protoc_insertion_point(field_get:viseme.id)
  return id_;
}
inline void viseme::set_id(::lotus::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:viseme.id)
}

// int32 offset = 2;
inline void viseme::clear_offset() {
  offset_ = 0;
}
inline ::lotus::google::protobuf::int32 viseme::offset() const {
  // @@protoc_insertion_point(field_get:viseme.offset)
  return offset_;
}
inline void viseme::set_offset(::lotus::google::protobuf::int32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:viseme.offset)
}

// -------------------------------------------------------------------

// VisemeAudio

// string json = 1;
inline void VisemeAudio::clear_json() {
  json_.ClearToEmptyNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VisemeAudio::json() const {
  // @@protoc_insertion_point(field_get:VisemeAudio.json)
  return json_.GetNoArena();
}
inline void VisemeAudio::set_json(const ::std::string& value) {
  
  json_.SetNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VisemeAudio.json)
}
#if LANG_CXX11
inline void VisemeAudio::set_json(::std::string&& value) {
  
  json_.SetNoArena(
    &::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VisemeAudio.json)
}
#endif
inline void VisemeAudio::set_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  json_.SetNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VisemeAudio.json)
}
inline void VisemeAudio::set_json(const char* value, size_t size) {
  
  json_.SetNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VisemeAudio.json)
}
inline ::std::string* VisemeAudio::mutable_json() {
  
  // @@protoc_insertion_point(field_mutable:VisemeAudio.json)
  return json_.MutableNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VisemeAudio::release_json() {
  // @@protoc_insertion_point(field_release:VisemeAudio.json)
  
  return json_.ReleaseNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VisemeAudio::set_allocated_json(::std::string* json) {
  if (json != NULL) {
    
  } else {
    
  }
  json_.SetAllocatedNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:VisemeAudio.json)
}

// repeated .viseme vLst = 2;
inline int VisemeAudio::vlst_size() const {
  return vlst_.size();
}
inline void VisemeAudio::clear_vlst() {
  vlst_.Clear();
}
inline const ::viseme& VisemeAudio::vlst(int index) const {
  // @@protoc_insertion_point(field_get:VisemeAudio.vLst)
  return vlst_.Get(index);
}
inline ::viseme* VisemeAudio::mutable_vlst(int index) {
  // @@protoc_insertion_point(field_mutable:VisemeAudio.vLst)
  return vlst_.Mutable(index);
}
inline ::viseme* VisemeAudio::add_vlst() {
  // @@protoc_insertion_point(field_add:VisemeAudio.vLst)
  return vlst_.Add();
}
inline ::lotus::google::protobuf::RepeatedPtrField< ::viseme >*
VisemeAudio::mutable_vlst() {
  // @@protoc_insertion_point(field_mutable_list:VisemeAudio.vLst)
  return &vlst_;
}
inline const ::lotus::google::protobuf::RepeatedPtrField< ::viseme >&
VisemeAudio::vlst() const {
  // @@protoc_insertion_point(field_list:VisemeAudio.vLst)
  return vlst_;
}

// bytes audio = 3;
inline void VisemeAudio::clear_audio() {
  audio_.ClearToEmptyNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VisemeAudio::audio() const {
  // @@protoc_insertion_point(field_get:VisemeAudio.audio)
  return audio_.GetNoArena();
}
inline void VisemeAudio::set_audio(const ::std::string& value) {
  
  audio_.SetNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VisemeAudio.audio)
}
#if LANG_CXX11
inline void VisemeAudio::set_audio(::std::string&& value) {
  
  audio_.SetNoArena(
    &::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VisemeAudio.audio)
}
#endif
inline void VisemeAudio::set_audio(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  audio_.SetNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VisemeAudio.audio)
}
inline void VisemeAudio::set_audio(const void* value, size_t size) {
  
  audio_.SetNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VisemeAudio.audio)
}
inline ::std::string* VisemeAudio::mutable_audio() {
  
  // @@protoc_insertion_point(field_mutable:VisemeAudio.audio)
  return audio_.MutableNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VisemeAudio::release_audio() {
  // @@protoc_insertion_point(field_release:VisemeAudio.audio)
  
  return audio_.ReleaseNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VisemeAudio::set_allocated_audio(::std::string* audio) {
  if (audio != NULL) {
    
  } else {
    
  }
  audio_.SetAllocatedNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio);
  // @@protoc_insertion_point(field_set_allocated:VisemeAudio.audio)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_audio_2eproto__INCLUDED
