// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audio2face.proto

#ifndef PROTOBUF_audio2face_2eproto__INCLUDED
#define PROTOBUF_audio2face_2eproto__INCLUDED

#include <string>

#include <Protobuf/lotus/google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <Protobuf/lotus/google/protobuf/io/coded_stream.h>
#include <Protobuf/lotus/google/protobuf/arena.h>
#include <Protobuf/lotus/google/protobuf/arenastring.h>
#include <Protobuf/lotus/google/protobuf/generated_message_table_driven.h>
#include <Protobuf/lotus/google/protobuf/generated_message_util.h>
#include <Protobuf/lotus/google/protobuf/metadata.h>
#include <Protobuf/lotus/google/protobuf/message.h>
#include <Protobuf/lotus/google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <Protobuf/lotus/google/protobuf/extension_set.h>  // IWYU pragma: export
#include <Protobuf/lotus/google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_audio2face_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::lotus::google::protobuf::internal::ParseTableField entries[];
  static const ::lotus::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::lotus::google::protobuf::internal::ParseTable schema[2];
  static const ::lotus::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::lotus::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::lotus::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRequestImpl();
void InitDefaultsRequest();
void InitDefaultsResponseImpl();
void InitDefaultsResponse();
inline void InitDefaults() {
  InitDefaultsRequest();
  InitDefaultsResponse();
}
}  // namespace protobuf_audio2face_2eproto
namespace tutorial {
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace tutorial
namespace tutorial {

// ===================================================================

class Request : public ::lotus::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::lotus::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::lotus::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::lotus::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::lotus::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::lotus::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::lotus::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::lotus::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::lotus::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::lotus::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::lotus::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // string tts_type = 2;
  void clear_tts_type();
  static const int kTtsTypeFieldNumber = 2;
  const ::std::string& tts_type() const;
  void set_tts_type(const ::std::string& value);
  #if LANG_CXX11
  void set_tts_type(::std::string&& value);
  #endif
  void set_tts_type(const char* value);
  void set_tts_type(const char* value, size_t size);
  ::std::string* mutable_tts_type();
  ::std::string* release_tts_type();
  void set_allocated_tts_type(::std::string* tts_type);

  // @@protoc_insertion_point(class_scope:tutorial.Request)
 private:

  ::lotus::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::lotus::google::protobuf::internal::ArenaStringPtr content_;
  ::lotus::google::protobuf::internal::ArenaStringPtr tts_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_audio2face_2eproto::TableStruct;
  friend void ::protobuf_audio2face_2eproto::InitDefaultsRequestImpl();
};
// -------------------------------------------------------------------

class Response : public ::lotus::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::lotus::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Response* New(::lotus::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::lotus::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::lotus::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::lotus::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::lotus::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::lotus::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::lotus::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Response* other);
  private:
  inline ::lotus::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::lotus::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float bs_value = 3;
  int bs_value_size() const;
  void clear_bs_value();
  static const int kBsValueFieldNumber = 3;
  float bs_value(int index) const;
  void set_bs_value(int index, float value);
  void add_bs_value(float value);
  const ::lotus::google::protobuf::RepeatedField< float >&
      bs_value() const;
  ::lotus::google::protobuf::RepeatedField< float >*
      mutable_bs_value();

  // repeated string bs_key = 4;
  int bs_key_size() const;
  void clear_bs_key();
  static const int kBsKeyFieldNumber = 4;
  const ::std::string& bs_key(int index) const;
  ::std::string* mutable_bs_key(int index);
  void set_bs_key(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_bs_key(int index, ::std::string&& value);
  #endif
  void set_bs_key(int index, const char* value);
  void set_bs_key(int index, const char* value, size_t size);
  ::std::string* add_bs_key();
  void add_bs_key(const ::std::string& value);
  #if LANG_CXX11
  void add_bs_key(::std::string&& value);
  #endif
  void add_bs_key(const char* value);
  void add_bs_key(const char* value, size_t size);
  const ::lotus::google::protobuf::RepeatedPtrField< ::std::string>& bs_key() const;
  ::lotus::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bs_key();

  // string content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // bytes wav_data = 5;
  void clear_wav_data();
  static const int kWavDataFieldNumber = 5;
  const ::std::string& wav_data() const;
  void set_wav_data(const ::std::string& value);
  #if LANG_CXX11
  void set_wav_data(::std::string&& value);
  #endif
  void set_wav_data(const char* value);
  void set_wav_data(const void* value, size_t size);
  ::std::string* mutable_wav_data();
  ::std::string* release_wav_data();
  void set_allocated_wav_data(::std::string* wav_data);

  // float emotion = 2;
  void clear_emotion();
  static const int kEmotionFieldNumber = 2;
  float emotion() const;
  void set_emotion(float value);

  // @@protoc_insertion_point(class_scope:tutorial.Response)
 private:

  ::lotus::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::lotus::google::protobuf::RepeatedField< float > bs_value_;
  mutable int _bs_value_cached_byte_size_;
  ::lotus::google::protobuf::RepeatedPtrField< ::std::string> bs_key_;
  ::lotus::google::protobuf::internal::ArenaStringPtr content_;
  ::lotus::google::protobuf::internal::ArenaStringPtr wav_data_;
  float emotion_;
  mutable int _cached_size_;
  friend struct ::protobuf_audio2face_2eproto::TableStruct;
  friend void ::protobuf_audio2face_2eproto::InitDefaultsResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// string content = 1;
inline void Request::clear_content() {
  content_.ClearToEmptyNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::content() const {
  // @@protoc_insertion_point(field_get:tutorial.Request.content)
  return content_.GetNoArena();
}
inline void Request::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Request.content)
}
#if LANG_CXX11
inline void Request::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Request.content)
}
#endif
inline void Request::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Request.content)
}
inline void Request::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Request.content)
}
inline ::std::string* Request::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Request.content)
  return content_.MutableNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_content() {
  // @@protoc_insertion_point(field_release:tutorial.Request.content)
  
  return content_.ReleaseNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Request.content)
}

// string tts_type = 2;
inline void Request::clear_tts_type() {
  tts_type_.ClearToEmptyNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::tts_type() const {
  // @@protoc_insertion_point(field_get:tutorial.Request.tts_type)
  return tts_type_.GetNoArena();
}
inline void Request::set_tts_type(const ::std::string& value) {
  
  tts_type_.SetNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Request.tts_type)
}
#if LANG_CXX11
inline void Request::set_tts_type(::std::string&& value) {
  
  tts_type_.SetNoArena(
    &::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Request.tts_type)
}
#endif
inline void Request::set_tts_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tts_type_.SetNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Request.tts_type)
}
inline void Request::set_tts_type(const char* value, size_t size) {
  
  tts_type_.SetNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Request.tts_type)
}
inline ::std::string* Request::mutable_tts_type() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Request.tts_type)
  return tts_type_.MutableNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_tts_type() {
  // @@protoc_insertion_point(field_release:tutorial.Request.tts_type)
  
  return tts_type_.ReleaseNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_tts_type(::std::string* tts_type) {
  if (tts_type != NULL) {
    
  } else {
    
  }
  tts_type_.SetAllocatedNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), tts_type);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Request.tts_type)
}

// -------------------------------------------------------------------

// Response

// string content = 1;
inline void Response::clear_content() {
  content_.ClearToEmptyNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::content() const {
  // @@protoc_insertion_point(field_get:tutorial.Response.content)
  return content_.GetNoArena();
}
inline void Response::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Response.content)
}
#if LANG_CXX11
inline void Response::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Response.content)
}
#endif
inline void Response::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Response.content)
}
inline void Response::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Response.content)
}
inline ::std::string* Response::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Response.content)
  return content_.MutableNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_content() {
  // @@protoc_insertion_point(field_release:tutorial.Response.content)
  
  return content_.ReleaseNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Response.content)
}

// float emotion = 2;
inline void Response::clear_emotion() {
  emotion_ = 0;
}
inline float Response::emotion() const {
  // @@protoc_insertion_point(field_get:tutorial.Response.emotion)
  return emotion_;
}
inline void Response::set_emotion(float value) {
  
  emotion_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Response.emotion)
}

// repeated float bs_value = 3;
inline int Response::bs_value_size() const {
  return bs_value_.size();
}
inline void Response::clear_bs_value() {
  bs_value_.Clear();
}
inline float Response::bs_value(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.Response.bs_value)
  return bs_value_.Get(index);
}
inline void Response::set_bs_value(int index, float value) {
  bs_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tutorial.Response.bs_value)
}
inline void Response::add_bs_value(float value) {
  bs_value_.Add(value);
  // @@protoc_insertion_point(field_add:tutorial.Response.bs_value)
}
inline const ::lotus::google::protobuf::RepeatedField< float >&
Response::bs_value() const {
  // @@protoc_insertion_point(field_list:tutorial.Response.bs_value)
  return bs_value_;
}
inline ::lotus::google::protobuf::RepeatedField< float >*
Response::mutable_bs_value() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.Response.bs_value)
  return &bs_value_;
}

// repeated string bs_key = 4;
inline int Response::bs_key_size() const {
  return bs_key_.size();
}
inline void Response::clear_bs_key() {
  bs_key_.Clear();
}
inline const ::std::string& Response::bs_key(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.Response.bs_key)
  return bs_key_.Get(index);
}
inline ::std::string* Response::mutable_bs_key(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.Response.bs_key)
  return bs_key_.Mutable(index);
}
inline void Response::set_bs_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tutorial.Response.bs_key)
  bs_key_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Response::set_bs_key(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tutorial.Response.bs_key)
  bs_key_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Response::set_bs_key(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bs_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tutorial.Response.bs_key)
}
inline void Response::set_bs_key(int index, const char* value, size_t size) {
  bs_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tutorial.Response.bs_key)
}
inline ::std::string* Response::add_bs_key() {
  // @@protoc_insertion_point(field_add_mutable:tutorial.Response.bs_key)
  return bs_key_.Add();
}
inline void Response::add_bs_key(const ::std::string& value) {
  bs_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tutorial.Response.bs_key)
}
#if LANG_CXX11
inline void Response::add_bs_key(::std::string&& value) {
  bs_key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tutorial.Response.bs_key)
}
#endif
inline void Response::add_bs_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bs_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tutorial.Response.bs_key)
}
inline void Response::add_bs_key(const char* value, size_t size) {
  bs_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tutorial.Response.bs_key)
}
inline const ::lotus::google::protobuf::RepeatedPtrField< ::std::string>&
Response::bs_key() const {
  // @@protoc_insertion_point(field_list:tutorial.Response.bs_key)
  return bs_key_;
}
inline ::lotus::google::protobuf::RepeatedPtrField< ::std::string>*
Response::mutable_bs_key() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.Response.bs_key)
  return &bs_key_;
}

// bytes wav_data = 5;
inline void Response::clear_wav_data() {
  wav_data_.ClearToEmptyNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::wav_data() const {
  // @@protoc_insertion_point(field_get:tutorial.Response.wav_data)
  return wav_data_.GetNoArena();
}
inline void Response::set_wav_data(const ::std::string& value) {
  
  wav_data_.SetNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Response.wav_data)
}
#if LANG_CXX11
inline void Response::set_wav_data(::std::string&& value) {
  
  wav_data_.SetNoArena(
    &::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Response.wav_data)
}
#endif
inline void Response::set_wav_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wav_data_.SetNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Response.wav_data)
}
inline void Response::set_wav_data(const void* value, size_t size) {
  
  wav_data_.SetNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Response.wav_data)
}
inline ::std::string* Response::mutable_wav_data() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Response.wav_data)
  return wav_data_.MutableNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_wav_data() {
  // @@protoc_insertion_point(field_release:tutorial.Response.wav_data)
  
  return wav_data_.ReleaseNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_wav_data(::std::string* wav_data) {
  if (wav_data != NULL) {
    
  } else {
    
  }
  wav_data_.SetAllocatedNoArena(&::lotus::google::protobuf::internal::GetEmptyStringAlreadyInited(), wav_data);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Response.wav_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_audio2face_2eproto__INCLUDED
